version: "3"

services:
  app:
    build:
      dockerfile: build/api/Dockerfile
      context: .
    ports:
      - "8080:8080"
    restart: unless-stopped
    env_file: ".env.example"
    depends_on:
      database:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - internal
      - external

  database:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${OHA_POSTGRESQL_DBNAME}"
      POSTGRES_PASSWORD: "${OHA_POSTGRESQL_PASSWORD}"
      POSTGRES_USER: "${OHA_POSTGRESQL_USERNAME}"
    healthcheck:
      test: pg_isready -d postgres
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - internal

  adminer:
    image: adminer:4.8.1-standalone
    ports:
      - '8081:8080'
    environment:
      ADMINER_DEFAULT_SERVER: database
      ADMINER_DESIGN: darcula
    depends_on:
      database:
        condition: service_healthy
    networks:
      - internal
      - external

  migrations:
    build:
      dockerfile: build/migrations/Dockerfile
      context: .
    env_file: ".env.example"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - internal

networks:
  internal:
    internal: true

  external: